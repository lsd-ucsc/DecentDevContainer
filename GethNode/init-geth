#!/usr/bin/env python3
# -*- coding:utf-8 -*-
###
# Copyright (c) 2023 Haofan Zheng
# Use of this source code is governed by an MIT-style
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
###


import os
import shlex
import signal
import subprocess
import sys
import threading


JWT_PATH = os.path.join(os.path.sep, 'geth', 'jwt.hex')
TERMINATE_EVENT = threading.Event()


def OnTerminate():
	TERMINATE_EVENT.set()


def RunExecCltGeth() -> subprocess.Popen:
	gethAddArgs = []
	envVal = os.getenv('GETH_OPTS', None)
	if envVal is not None:
		gethAddArgs = shlex.split(envVal)

	gethCmd = [
		'/usr/bin/geth',
		'--authrpc.jwtsecret', '/geth/jwt.hex',
	] + gethAddArgs

	gethEnv = {
		k: v for k, v in os.environ.items() if (k.startswith('GETH_') or k == 'PATH')
	}

	gethProc = subprocess.Popen(
		gethCmd,
		env=gethEnv,
		stdout=sys.stdout,
		stderr=sys.stderr
	)
	return gethProc


def RunConsCltPrysm() -> subprocess.Popen:
	prysmAddArgs = []
	envVal = os.getenv('PRYSM_OPTS', None)
	if envVal is not None:
		prysmAddArgs = shlex.split(envVal)

	prysmCmd = [
		'/opt/prysm/prysm.sh',
		'beacon-chain',
		'--jwt-secret=/geth/jwt.hex',
		'--execution-endpoint=http://localhost:8551',
	] + prysmAddArgs

	prysmEnv = {
		'PATH': os.environ.get('PATH', ''),
	}

	prysmProc = subprocess.Popen(
		prysmCmd,
		env=prysmEnv,
		stdout=sys.stdout,
		stderr=sys.stderr
	)
	return prysmProc


def RunConsCltLighthouse() -> subprocess.Popen:
	lighthouseAddArgs = []
	envVal = os.getenv('LIGHTHOUSE_OPTS', None)
	if envVal is not None:
		lighthouseAddArgs = shlex.split(envVal)

	lighthouseCmd = [
		'/opt/lighthouse/lighthouse',
		'beacon_node',
		'--execution-endpoint', 'http://localhost:8551',
		'--execution-jwt', '/geth/jwt.hex',
	] + lighthouseAddArgs

	lighthouseEnv = {
		'PATH': os.environ.get('PATH', ''),
	}

	lighthouseProc = subprocess.Popen(
		lighthouseCmd,
		env=lighthouseEnv,
		stdout=sys.stdout,
		stderr=sys.stderr
	)
	return lighthouseProc


def RunValiCltLighthouse() -> subprocess.Popen:
	lighthouseAddArgs = []
	envVal = os.getenv('V_LIGHTHOUSE_OPTS', None)
	if envVal is not None:
		lighthouseAddArgs = shlex.split(envVal)

	lighthouseCmd = [
		'/opt/lighthouse/lighthouse',
		'validator_client',
		'--beacon-nodes', 'http://localhost:5052',
	] + lighthouseAddArgs

	lighthouseEnv = {
		'PATH': os.environ.get('PATH', ''),
	}

	lighthouseProc = subprocess.Popen(
		lighthouseCmd,
		env=lighthouseEnv,
		stdout=sys.stdout,
		stderr=sys.stderr
	)
	return lighthouseProc


def TerminateProc(proc: subprocess.Popen) -> None:
	while proc.poll() is None:
		proc.terminate()
		try:
			proc.wait(timeout=5)
		except subprocess.TimeoutExpired:
			pass


def main():
	if not os.path.isfile(JWT_PATH):
		with open(JWT_PATH, 'w') as f:
			f.write(os.urandom(32).hex())

	execCltProc = None
	consCltProc = None
	valiCltProc = None

	try:
		execCltSelect = os.getenv('ETH_EXEC_CLT', None)
		if execCltSelect == 'geth':
			execCltProc = RunExecCltGeth()
		else:
			raise RuntimeError(
				'Unknown execution client selection: {}'.format(execCltSelect)
			)

		consCltSelect = os.getenv('ETH_CONS_CLT', None)
		if consCltSelect == 'prysm':
			consCltProc = RunConsCltPrysm()
		elif consCltSelect == 'lighthouse':
			consCltProc = RunConsCltLighthouse()
		else:
			raise RuntimeError(
				'Unknown consensus client selection: {}'.format(consCltSelect)
			)

		valiCltSelect = os.getenv('ETH_VALI_CLT', None)
		if valiCltSelect == 'lighthouse':
			valiCltProc = RunValiCltLighthouse()
		elif valiCltSelect is not None:
			raise RuntimeError(
				'Unknown validator client selection: {}'.format(valiCltSelect)
			)
		else:
			print('Validator client disabled.')

		# register signal handler
		signal.signal(signal.SIGTERM, OnTerminate)
		signal.signal(signal.SIGINT, OnTerminate)

		# wait for termination
		while not TERMINATE_EVENT.is_set():
			if execCltProc is not None and execCltProc.poll() is not None:
				raise RuntimeError(
					f'Execution client process terminated with code '
					f'{execCltProc.returncode}'
				)
			if consCltProc is not None and consCltProc.poll() is not None:
				raise RuntimeError(
					f'Consensus client process terminated with code '
					f'{consCltProc.returncode}'
				)
			if valiCltProc is not None and valiCltProc.poll() is not None:
				raise RuntimeError(
					f'Validator client process terminated with code '
					f'{valiCltProc.returncode}'
				)
			TERMINATE_EVENT.wait(1.0)
	finally:
		# terminate processes
		TerminateProc(consCltProc)
		TerminateProc(execCltProc)
		if valiCltProc is not None:
			TerminateProc(valiCltProc)


if __name__ == '__main__':
	main()

